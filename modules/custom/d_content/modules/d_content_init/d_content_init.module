<?php

/**
 * @file
 * d_content_init module.
 */

use Drupal\Core\File\FileSystemInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Component\Serialization\Yaml;
use Drupal\taxonomy\Entity\Term;

/**
 * Save node with paragraphs.
 * This is alterable in another init modules.
 *
 * @param array $node_to_create
 *  Array node with paragraph content.
 *
 * @return integer
 *  Node ID.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_save_node($node_to_create) {
  $node = Node::create($node_to_create['info']);

  foreach ($node_to_create as $field_name => $field_value) {
    if (!empty($field_value['paragraphs'])) {
      foreach ($field_value['paragraphs'] as $paragraph_data) {
        $paragraph = d_content_init_fill_paragraph($paragraph_data);
        $node->$field_name->appendItem($paragraph);
      }
    }
    elseif ($field_name != 'info') {
      d_content_init_fill_field($node, $field_name, $field_value);
    }
  }

  $node->save();
  return $node->id();
}

/**
 * Save an entity.
 *
 * @param $entity_to_create
 *  Array with entity.
 * @param $entity_type
 *  Entity type.
 * @param $uuid
 *  UUID of entity.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_save_entity($entity_to_create, $entity_type, $uuid) {
  $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
  $entity = $storage->create($entity_to_create + ['uuid' => $uuid]);
  $entity->save();
}

/**
 * Fill the field.
 *
 * @param Drupal\Core\Entity\ContentEntityBase $entity
 *  Entity object to set fields.
 *
 * @param string $name
 *  Name of the field.
 *
 * @param array $value
 *  Field array (type and value).
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_fill_field($entity, $name, $value) {

  // Allow other init modules to add their fields types.
  \Drupal::moduleHandler()->alter('fill_field', $entity, $name, $value);

  switch ($value['type']) {
    case 'text':
    case 'text_long':
      $entity->set($name, $value['data']);
      $entity->$name->format = 'full_html';
      break;
    case 'text_select':
      $entity->set($name, $value['data']);
      break;
    case 'cta':
      $entity_attributes = [
        'title' => $value['data']['text'],
        'uri' => $value['data']['link'],
        'options' => [
          'attributes' => [
            'class' => 'btn btn-primary',
          ],
        ],
      ];
      if (isset($value['data']['options'])) {
        $entity_attributes['options'] = $value['data']['options'];
      }
      $entity->set($name, $entity_attributes);
      break;
    case 'file':
    case 'image':
      // Convert short format to full.
      if (!is_array($value['data'])) {
        $value['data'] = [
          ['file' => $value['data']],
        ];
      }
      $dst_dir = $value['dst_dir'] ?? '';
      // Add all files.
      foreach ($value['data'] as $file) {
        /**
         * @var \Drupal\file\FileInterface $file_object
         */
        $file_object = d_content_init_get_file($file['file'], $dst_dir);
        if (!empty($file_object)) {
          $params = ["target_id" => $file_object->id()];
          if ($value['type'] == 'image') {
            if (!empty($file['alt'])) {
              $params["alt"] = $file['alt'];
            }
          }
          $entity->$name->appendItem($params);
        }
      }
      break;
    case 'paragraph_reference':
      if (empty($value['subtype'])) {
        $value['subtype'] = 'd_p_single_text_block';
      }
      foreach ($value['data'] as $child) {
        if($value['subtype'] == 'paragraphs_wrapper') {
          $new_child['data'] = $child['data'];
          $new_child['paragraph_type'] = $child['type'];
        }
        else {
          $new_child['data'] = $child;
          $new_child['paragraph_type'] = $value['subtype'];
        }
        $child_paragraph = d_content_init_fill_paragraph($new_child);
        $entity->$name->appendItem($child_paragraph);
      }
      break;
    case 'entity_reference':
      $entity->set($name, $value['data']);
      break;
    case 'boolean':
      $entity->set($name, $value['data']);
      break;
    case 'number':
      $entity->set($name, $value['data']);
      break;
    case 'taxonomy':
      $vid = $value['data']['vid'];
      foreach ($value['data']['terms'] as $term_name) {
        $terms = taxonomy_term_load_multiple_by_name($term_name, $vid);

        if (empty($terms)) {
          // Create term and use it.
          $new_term = Term::create([
            'name' => $term_name,
            'vid' => $vid,
          ]);

          $new_term->save();
          $terms = taxonomy_term_load_multiple_by_name($term_name, $vid);
        }

        foreach ($terms as $term) {
          /** @var Term $term */
          $entity->$name->appendItem($term->id());
        }
      }
      break;
    case 'field_p_configuration_storage':
      if (!empty($value['custom_class'])) {
        $data = json_encode(['custom_class' => $value['custom_class']]);
        $entity->set($name, $data);
      }
      break;
  }
}

/**
 * Fill the paragraph.
 *
 * @param array $paragraph_data
 *  Array with paragraph content.
 *
 * @return \Drupal\Core\Entity\EntityInterface|\Drupal\paragraphs\Entity\Paragraph
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_fill_paragraph($paragraph_data) {
  $paragraph = Paragraph::create([
    'type' => $paragraph_data['paragraph_type'],
  ]);

  foreach ($paragraph_data['data'] as $field_name => $field_value) {
    d_content_init_fill_field($paragraph, $field_name, $field_value);
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Add page content from YML file.
 *
 * @param array $params
 *  Array with parameters:
 *  - module: a module with ymls and assets to look for (defaults to d_content_init).
 *  - file: YML file name without path.
 *  - title: Menu link title
 *  - weight: Menu link weight
 *  - children: list of children
 *  - parent: parent menu ID
 *
 * @return integer|null
 *  Menu item plugin ID.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_add_node($params) {
  $page_array = Yaml::decode(file_get_contents($params['file']));
  $nid = d_content_init_save_node($page_array);

  // Set homepage.
  if ($homepage = isset($page_array['info']['homepage'])) {
    if ($homepage) {
      $config = \Drupal::configFactory()->getEditable('system.site');
      $config->set('page.front', '/node/' . $nid)->save();
    }
  }

  // If title is not empty add menu link.
  if (!empty($params['link'])) {
    $config = [
      'title' => $params['link'],
      'link' => ['uri' => 'entity:node/' . $nid],
      'menu_name' => 'main',
      'weight' => $params['weight'],
      'expanded' => !empty($params['children'])
    ];

    // Handle submenus.
    if (!empty($params['parent'])) {
      $config['parent'] = $params['parent'];
    }

    // Save link.
    $menu_link = MenuLinkContent::create($config);
    $menu_link->save();
    return $menu_link->getPluginId();
  }
  else {
    return null;
  }
}

/**
 * Add nodes from a given structure.
 *
 * @param $structure
 *  Array with nodes (may be nested to one level).
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_add_nodes($structure) {
  foreach ($structure as $key => $page) {
    $mid = d_content_init_add_node($page);
    if (!empty($page['children'])) {
      foreach ($page['children'] as $child) {
        $child['parent'] = $mid;
        d_content_init_add_node($child);
      }
    }
  }
}

/**
 * Save file in Drupal.
 *
 * @param string $path
 *  File path:
 *  - "file.jpg" for files inside d_content_init
 *  - "example_init/file.jpg" for files inside example_init module
 * @param string $dst_dir
 *  File destination directory in public files directory.
 *
 * @return \Drupal\file\FileInterface|FALSE
 *   A file entity, or FALSE on error.
 */
function d_content_init_get_file($path, $dst_dir = NULL) {
  // Prepare destination directory.
  $directory = 'public://';
  $dst_dir = trim($dst_dir, '/');
  if (!empty($dst_dir)) {
    $directory .= $dst_dir . '/';
    if (!Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
      Drupal::logger('file')->warning('Directory %directory could not be created or is not accessible.', ['%directory' => $directory]);
      return FALSE;
    }
  }

  // Check if image name contains module.
  $parts = explode('/', $path);
  if (count($parts) == 2) {
    $dir = drupal_get_path('module', $parts[0]);
    $filename = $parts[1];
  }
  else {
    // In case there is no module name specified in path, use placeholder file.
    $dir = drupal_get_path('module', 'd_content_init');
    $filename = 'placeholder.png';
  }

  // Save the file.
  $data = file_get_contents("$dir/assets/$filename");
  $image = file_save_data($data, $directory . $filename, FILE_EXISTS_REPLACE);
  return $image;
}

/**
 * Create all the content.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_create_all() {
  // Set default structure.
  $structure = [];

  // Allow other modules to modify the structure.
  $context = 'all';
  \Drupal::moduleHandler()->alter('content_structure', $structure, $context);

  d_content_init_add_nodes($structure);
}

/**
 * Add footer to the website.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_add_footer() {
  // Footer block.
  $config = \Drupal::config('system.site');
  $footer = [
    'info' => 'Footer',
    'type' => 'content_block',
    'field_d_main_title' => $config->get('name'),
    'field_d_long_text' => $config->get('slogan'),
  ];
  d_content_init_save_entity($footer, 'block_content', '092dd69e-c6c4-4f0a-9780-ec15b89ec5b5');
}

/**
 * Removes all the content and recreates it again.
 */
function d_content_init_recreate_content() {
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $entities = $storage->loadMultiple();
  $storage->delete($entities);

  d_content_init_create_all();
}

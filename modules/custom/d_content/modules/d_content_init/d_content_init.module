<?php

/**
 * @file
 * d_content_init module.
 */

use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Component\Serialization\Yaml;

/**
 * Save node with paragraphs.
 *
 * @param array $node_to_create
 *  Array node with paragraph content.
 *
 * @return integer
 *  Node ID.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_save_node($node_to_create) {
  $node = Node::create([
    'type' => $node_to_create['type'],
    'title' => $node_to_create['title'],
  ]);

  if (isset($node_to_create['field_page_section']['paragraphs'])) {
    foreach ($node_to_create['field_page_section']['paragraphs'] as $paragraph_data) {
      $paragraph = d_content_init_fill_paragraph($paragraph_data);
      $node->field_page_section->appendItem($paragraph);
    }
  }

  \Drupal::moduleHandler()->alter('node_add', $node, $node_to_create);
  $node->save();

  return $node->id();
}

/**
 * Save an entity.
 *
 * @param $entity_to_create
 *  Array with entity.
 * @param $entity_type
 *  Entity type.
 * @param $uuid
 *  UUID of entity.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_save_entity($entity_to_create, $entity_type, $uuid) {
  $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
  $entity = $storage->create($entity_to_create + ['uuid' => $uuid]);
  $entity->save();
}

/**
 * Fill the paragraph.
 *
 * @param array $paragraph_data
 *  Array with paragraph content.
 *
 * @return \Drupal\Core\Entity\EntityInterface|\Drupal\paragraphs\Entity\Paragraph
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_fill_paragraph($paragraph_data) {
  $paragraph = Paragraph::create([
    'type' => $paragraph_data['paragraph_type'],
  ]);

  foreach ($paragraph_data['data'] as $field_name => $value) {
    switch ($value['type']) {
      case 'text':
      case 'text_long':
        $paragraph->set($field_name, $value['data']);
        $paragraph->$field_name->format = 'full_html';
        break;
      case 'text_select':
        $paragraph->set($field_name, $value['data']);
        break;
      case 'cta':
        $paragraph->set($field_name, [
          'title' => $value['data']['text'],
          'uri' => $value['data']['link'],
        ]);
        break;
      case 'file':
      case 'image':
        $image = d_content_init_get_image($value['data']);
        $paragraph->$field_name->appendItem($image);
        break;
      case 'paragraph_reference':
        foreach ($value['data'] as $child) {
          // @TODO fix this ugly fix of incorrect structure in array
          if($field_name == 'field_d_p_tb_block_reference') {
            $new_child['data'] = $child;
            $new_child['paragraph_type'] = 'd_p_single_text_block';
            $child_paragraph = d_content_init_fill_paragraph($new_child);
            $paragraph->$field_name->appendItem($child_paragraph);
          }
        }
        break;
      case 'entity_reference':
        $paragraph->set($field_name, $value['data']);
        break;
      case 'boolean':
        $paragraph->set($field_name, $value['data']);
        break;
    }
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Add page content from YML file.
 *
 * @param array $params
 *  Array with parameters:
 *  - module: a module with ymls and assets to look for (defaults to d_content_init).
 *  - file: YML file name without path.
 *  - title: Menu link title
 *  - weight: Menu link weight
 *  - children: list of children
 *  - parent: parent menu ID
 *
 * @return integer|null
 *  Menu item plugin ID.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function d_content_init_add_node($params) {
  $page_array = Yaml::decode(file_get_contents($params['file']));
  $nid = d_content_init_save_node($page_array);

  // If title is not empty add menu link.
  if (!empty($params['link'])) {
    $config = [
      'title' => $params['link'],
      'link' => ['uri' => 'entity:node/' . $nid],
      'menu_name' => 'main',
      'weight' => $params['weight'],
      'expanded' => !empty($params['children'])
    ];

    // Handle submenus.
    if (!empty($params['parent'])) {
      $config['parent'] = $params['parent'];
    }

    // Save link.
    $menu_link = MenuLinkContent::create($config);
    $menu_link->save();
    return $menu_link->getPluginId();
  }
  else {
    return null;
  }
}

/**
 * Save file in Drupal.
 *
 * @param string $path
 *  File path:
 *  - "file.jpg" for files inside d_content_init
 *  - "example_init/file.jpg" for files inside example_init module
 *
 * @return \Drupal\file\FileInterface
 */
function d_content_init_get_image($path) {
  // Check if image name contains module.
  $parts = explode('/', $path);
  if (count($parts) == 2) {
    $dir = drupal_get_path('module', $parts[0]);
    $filename = $parts[1];
  }
  else {
    $dir = drupal_get_path('module', 'd_content_init');
    $filename = $path;
  }

  // Save the file.
  $data = file_get_contents("$dir/assets/$filename");
  $image = file_save_data($data, 'public://demo/' . $filename, FILE_EXISTS_REPLACE);
  return $image;
}
